"use strict";(self.webpackChunkminecraft_plugin_docs=self.webpackChunkminecraft_plugin_docs||[]).push([[351],{42:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"plugin-usage","title":"Plugin Usage","description":"\x3c!-- # Installing the plugin","source":"@site/docs/plugin-usage.md","sourceDirName":".","slug":"/plugin-usage","permalink":"/plugin-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/AdvancedArmorStands/Docs/tree/main/docs/plugin-usage.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"id":"plugin-usage","title":"Plugin Usage","sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Configuration","permalink":"/configuration"},"next":{"title":"Developer API","permalink":"/api"}}');var s=t(4848),o=t(8453);const r={id:"plugin-usage",title:"Plugin Usage",sidebar_position:9},i="Commands",d={},l=[];function c(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"commands",children:"Commands"})}),"\n",(0,s.jsx)(n.p,{children:"This plugin has so many commands that i can't list there's some examples"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"/as create <type> <name>"})}),"\n",(0,s.jsxs)(n.p,{children:["the type should be ",(0,s.jsx)(n.code,{children:"Default"})," or ",(0,s.jsx)(n.code,{children:"Custom"})," if set to custom you have to give the properties of the armor stand you want but if you choose any other like default you can just give the name and done."]}),"\n",(0,s.jsx)(n.h1,{id:"how-to-add-a-type",children:"How to add a type"}),"\n",(0,s.jsxs)(n.p,{children:["to add a type open the ",(0,s.jsx)(n.code,{children:"types.yml"})," config file and copy the default config, if you don't have it, here you are:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"default: # <====== Name of the type\r\n  Arms: true # <====== Has arms?\r\n  Gravity: false # <====== Has gravity?\r\n  BasePlate: false # <====== Does it have a baseplate?\r\n  CustomName: '&cMade with aas' # <====== Custom name for the entity\r\n  isCustomNameVisible: false # <====== Should the custom name be visible?\r\n  itemInHandMaterial: WOOD_SWORD # <====== Item held in the hand\r\n  HeadPos: {} # <====== Head position (empty by default)\r\n  rightArmPose: # <====== Right arm pose\r\n    x: -45\r\n    y: 0\r\n    z: 0\r\n  leftArmPose: # <====== Left arm pose\r\n    x: 45\r\n    y: 0\r\n    z: 0\r\n  rightLegPose: # <====== Right leg pose\r\n    x: 45\r\n    y: 0\r\n    z: 0\r\n  leftLegPose: # <====== Left leg pose\r\n    x: -45\r\n    y: 0\r\n    z: 0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["and then you can copy it and paste it again and rename the name of the config (",(0,s.jsx)(n.code,{children:"Default"}),") to whatever you want and reload the plugin now you have 2 types its that easy"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);